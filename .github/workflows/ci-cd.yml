name: CI-CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  BACKEND_DIR: ecom-backend
  FRONTEND_DIR: ecom-frontend
  IMAGE_BACKEND: ${{ secrets.DOCKERHUB_USERNAME }}/ecom-backend
  IMAGE_FRONTEND: ${{ secrets.DOCKERHUB_USERNAME }}/ecom-frontend

jobs:
  # Stage 1: Build & Install
  build_install:
    name: Build & Install
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Build Backend (Maven) (retry up to 3)
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          set -euo pipefail
          echo "Building Backend with retries..."
          attempts=0; max=3
          until [ $attempts -ge $max ]
          do
            attempts=$((attempts+1))
            echo "Attempt $attempts/$max: mvn -B clean package -DskipTests"
            if mvn -B clean package -DskipTests; then
              echo "✓ Backend build successful"
              break
            fi
            echo "Backend build failed on attempt $attempts"
            sleep $((attempts * 5))
          done
          if [ $attempts -gt $max ]; then
            echo "Backend build failed after $max attempts"; exit 1
          fi

      - name: Build Frontend (npm) (retry up to 3)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          set -euo pipefail
          echo "Building Frontend with retries..."
          attempts=0; max=3
          until [ $attempts -ge $max ]
          do
            attempts=$((attempts+1))
            echo "Attempt $attempts/$max: npm ci && npm run build"
            if npm ci && npm run build; then
              echo "✓ Frontend build successful"
              break
            fi
            echo "Frontend build failed on attempt $attempts"
            sleep $((attempts * 5))
          done
          if [ $attempts -gt $max ]; then
            echo "Frontend build failed after $max attempts"; exit 1
          fi

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ${{ env.BACKEND_DIR }}/target/*.jar
            ${{ env.FRONTEND_DIR }}/dist/

  # Stage 2: Lint & Security Scan
  lint_security:
    name: Lint & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build_install
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Frontend Lint
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm ci
          npm run lint 2>&1 | tee lint-report.txt || true
          echo "✓ Linting completed"

      - name: Frontend npm audit
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          echo "Running Security Audit..."
          npm audit --audit-level=moderate 2>&1 | tee audit-report.txt || true
          echo "✓ Security audit completed"

      - name: Trivy Base Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: eclipse-temurin:21-jre-alpine
          format: 'sarif'
          output: 'trivy-backend.sarif'
        continue-on-error: true

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-backend.sarif
        continue-on-error: true

  # Stage 3: Test with Database
  test_with_db:
    name: Test with Database
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [build_install, lint_security]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ecommerce
          POSTGRES_USER: ecomuser
          POSTGRES_PASSWORD: changeme
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          ready=1
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U ecomuser; then
              echo "✓ PostgreSQL is ready"
              ready=0
              break
            fi
            echo "Attempt $i/30: Waiting for PostgreSQL..."
            sleep 2
          done
          if [ "$ready" -ne 0 ]; then
            echo "PostgreSQL did not become ready in time"; exit 1
          fi

      - name: Run Backend Tests
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ecommerce
          SPRING_DATASOURCE_USERNAME: ecomuser
          SPRING_DATASOURCE_PASSWORD: changeme
        run: |
          set -euo pipefail
          echo "Running Backend Tests with retries..."
          attempts=0; max=3
          until [ $attempts -ge $max ]
          do
            attempts=$((attempts+1))
            echo "Attempt $attempts/$max: mvn -B test -DargLine='-Dspring.profiles.active=test'"
            if mvn -B test -DargLine="-Dspring.profiles.active=test"; then
              echo "✓ Backend tests passed"
              break
            fi
            echo "Backend tests failed on attempt $attempts"
            sleep $((attempts * 5))
          done
          if [ $attempts -gt $max ]; then
            echo "Backend tests failed after $max attempts"; exit 1
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Run Frontend Tests
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm ci
          npm test -- --watchAll=false --passWithNoTests 2>&1 | tee test-report.txt || true
          echo "✓ Frontend tests completed"

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            ${{ env.BACKEND_DIR }}/target/surefire-reports/
            ${{ env.FRONTEND_DIR }}/test-report.txt

  # Stage 4: Build Docker Images
  build_docker_images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: test_with_db
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Metadata (Backend)
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_BACKEND }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.BACKEND_DIR }}/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_BACKEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_BACKEND }}:buildcache,mode=max

      - name: Extract Metadata (Frontend)
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.FRONTEND_DIR }}/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_FRONTEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_FRONTEND }}:buildcache,mode=max

      - name: Image Scan Results
        run: |
          echo "✓ Backend Image: ${{ env.IMAGE_BACKEND }}"
          echo "✓ Frontend Image: ${{ env.IMAGE_FRONTEND }}"
          echo "Images pushed to Docker Hub successfully!"

  # Stage 5: Deploy (Conditional)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build_docker_images
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && success()
    env:
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      RENDER_BACKEND_SERVICE_ID: ${{ secrets.RENDER_BACKEND_SERVICE_ID }}
      RENDER_FRONTEND_SERVICE_ID: ${{ secrets.RENDER_FRONTEND_SERVICE_ID }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deployment Notification
        run: |
          echo "=== Deployment Initiated ==="
          echo "Timestamp: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Backend Image: ${{ needs.build_docker_images.outputs.backend-image }}"
          echo "Frontend Image: ${{ needs.build_docker_images.outputs.frontend-image }}"
          echo "=== Ready for Production Deployment ==="

      - name: Pull Latest Images
        run: |
          echo "Images are available at Docker Hub:"
          echo "- ${{ needs.build_docker_images.outputs.backend-image }}"
          echo "- ${{ needs.build_docker_images.outputs.frontend-image }}"

      - name: Deploy Backend to Render
        if: env.RENDER_API_KEY != ''
        run: |
          echo "Deploying Backend to Render..."
          curl -X POST "https://api.render.com/v1/services/${RENDER_BACKEND_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}'
          echo "✓ Backend deployment triggered on Render"
        continue-on-error: true

      - name: Deploy Frontend to Render
        if: env.RENDER_API_KEY != ''
        run: |
          echo "Deploying Frontend to Render..."
          curl -X POST "https://api.render.com/v1/services/${RENDER_FRONTEND_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}'
          echo "✓ Frontend deployment triggered on Render"
        continue-on-error: true

      - name: Deployment Summary
        run: |
          cat > deployment-summary.txt <<EOF
          Deployment Summary
          ==================
          Date: $(date)
          Status: SUCCESS
          Backend Image: ${{ needs.build_docker_images.outputs.backend-image }}
          Frontend Image: ${{ needs.build_docker_images.outputs.frontend-image }}
          
          Docker Hub Deployment:
          1. Images available at Docker Hub
          2. Use docker-compose.yml to deploy locally
          3. Run: docker-compose up -d
          
          Render Deployment:
          1. Backend: Deployed to Render (if configured)
          2. Frontend: Deployed to Render (if configured)
          3. Check Render dashboard for live URLs
          EOF
          cat deployment-summary.txt

      - name: Upload Deployment Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-summary.txt

  # Finalize: always run, auto-retry the workflow on failures (up to 3 attempts)
  finalize:
    name: Finalize and Auto-Retry
    runs-on: ubuntu-latest
    needs: [build_install, lint_security, test_with_db, build_docker_images]
    if: always()
    steps:
      - name: Display run metadata
        run: |
          echo "GITHUB_RUN_ID=${GITHUB_RUN_ID}"
          echo "GITHUB_RUN_ATTEMPT=${GITHUB_RUN_ATTEMPT:-1}"

      - name: Upload logs and artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pre-final-artifacts
          path: |
            ${{ env.BACKEND_DIR }}/target/**
            ${{ env.FRONTEND_DIR }}/dist/**
            **/test-report.txt

      - name: Auto-retry on failure (up to 3 attempts)
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = Number(process.env.GITHUB_RUN_ID);
            const attempt = Number(process.env.GITHUB_RUN_ATTEMPT || 1);
            core.info(`Current run id=${runId}, attempt=${attempt}`);
            const run = await github.rest.actions.getWorkflowRun({ owner: context.repo.owner, repo: context.repo.repo, run_id: runId });
            const conclusion = run.data.conclusion;
            core.info(`Run conclusion: ${conclusion}`);
            if (conclusion !== 'success' && attempt < 3) {
              core.info('Triggering a rerun (attempt < 3)');
              await github.rest.actions.reRunWorkflowRun({ owner: context.repo.owner, repo: context.repo.repo, run_id: runId });
              core.info('Rerun requested.');
            } else {
              core.info('No rerun required (either success or max attempts reached).');
            }
